import React, { useState, useEffect } from 'react';
import { View, Text, Button, FlatList, ActivityIndicator, StyleSheet } from 'react-native';
import BluetoothSerial from 'react-native-bluetooth-serial-next';
import { request, PERMISSIONS, RESULTS } from 'react-native-permissions';

const BluetoothPage = () => {
  const [bluetoothEnabled, setBluetoothEnabled] = useState(false);  // Boolean state for Bluetooth
  const [devicesList, setDevicesList] = useState([]);
  const [connection, setConnection] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [latestRPM, setLatestRPM] = useState(null);
  const [timer, setTimer] = useState(null);

  useEffect(() => {
    // Request Bluetooth permission
    request(PERMISSIONS.ANDROID.BLUETOOTH).then((result) => {
      if (result === RESULTS.GRANTED) {
        initializeBluetooth();
      }
    });

    return () => {
      if (timer) clearInterval(timer);
      if (connection) connection.close();
    };
  }, []);

  const initializeBluetooth = async () => {
    try {
      const isBluetoothEnabled = await BluetoothSerial.isEnabled();  // Boolean state
      setBluetoothEnabled(isBluetoothEnabled);

      if (isBluetoothEnabled) {
        const devices = await BluetoothSerial.list();
        setDevicesList(devices);
      }
    } catch (error) {
      console.error("Error checking Bluetooth state", error);
    }
  };

  const connectToDevice = async (device) => {
    try {
      setIsConnecting(true);

      // Connect to already paired device
      const conn = await BluetoothSerial.connect(device.id);
      setConnection(conn);
      console.log('Connected to ' + device.name);

      setIsConnecting(false);

      // Listen for incoming data
      BluetoothSerial.onData((data) => {
        const raw = data.toString();
        if (raw.includes('41 0C')) {
          const match = /41 0C ([0-9A-Fa-f]{2}) ([0-9A-Fa-f]{2})/.exec(raw);
          if (match) {
            const A = parseInt(match[1], 16);
            const B = parseInt(match[2], 16);
            setLatestRPM(((A * 256) + B) / 4);
          }
        }
      });

      // Send OBD Command every 1 second
      const intervalId = setInterval(() => {
        sendOBDCommand('010C');
      }, 1000);
      setTimer(intervalId);
    } catch (e) {
      console.error('Connection failed:', e);
      setIsConnecting(false);
    }
  };

  const sendOBDCommand = (command) => {
    if (connection) {
      const commandWithCR = `${command}\r`;
      connection.write(commandWithCR);
    }
  };

  const handleDisconnect = () => {
    if (timer) clearInterval(timer);
    if (connection) connection.close();
    setConnection(null);
    setLatestRPM(null);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>IntelliDriver</Text>
      <Text>Bluetooth State: {bluetoothEnabled ? 'ON' : 'OFF'}</Text>

      {isConnecting && <ActivityIndicator size="large" />}
      
      {!isConnecting && !connection && bluetoothEnabled && (
        <FlatList
          data={devicesList}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.deviceItem}>
              <Text>{item.name ?? 'Unknown'}</Text>
              <Button title="Connect" onPress={() => connectToDevice(item)} />
            </View>
          )}
        />
      )}

      {connection && (
        <View style={styles.connectedContainer}>
          <Text style={styles.connectedText}>Connected!</Text>
          <Text style={styles.rpmText}>Latest RPM: {latestRPM ?? '--'}</Text>
          <Button title="Disconnect" onPress={handleDisconnect} color="red" />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  deviceItem: {
    padding: 10,
    marginVertical: 5,
    backgroundColor: '#f0f0f0',
    borderRadius: 5,
    width: '100%',
  },
  connectedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  connectedText: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  rpmText: {
    fontSize: 24,
    color: '#007BFF',
    marginBottom: 20,
  },
});

export default BluetoothPage;
